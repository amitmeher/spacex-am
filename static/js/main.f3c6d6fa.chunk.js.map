{"version":3,"sources":["logo.svg","Styles/Styles.js","Components/FilterSection.js","Components/LaunchCard.js","Components/LaunchList.js","Application.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","theme","fullOuter","padding","height","overflowX","backgroundColor","header","fontWeight","fontSize","question","color","top","horizontal","width","marginLeft","marginRight","borderWidth","filterHeader","withStyles","styles","props","classes","selected","setSelected","handleSelect","name","value","buttonStyle","textTransform","Paper","className","Grid","container","spacing","justify","style","margin","startYear","currentYear","Date","getFullYear","years","includes","length","getYearRange","map","item","Button","onClick","useStyles","makeStyles","media","content","LaunchCard","launchDetails","Card","CardMedia","image","links","flickr_images","logo","CardContent","Typography","variant","noWrap","mission_name","flight_number","mission_id","launch_date_local","launch_success","launch_landing","LaunchList","launchList","overflow","idx","lg","md","sm","xs","useState","setLaunchList","useEffect","selectedParam","param","toLowerCase","fetch","URLSearchParams","limit","then","response","json","data","catch","error","console","fetchData","direction","marginTop","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f3c6d6fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const Styles = theme => ({\r\n    fullOuter: {\r\n        padding: 0,\r\n        // boxSizing: 'border-box',\r\n        // width: 'auto',\r\n        height: '100vh',\r\n        // // display: 'block',\r\n        // overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        backgroundColor: 'lightGrey'\r\n    },\r\n    header: {\r\n        padding: 15,\r\n        fontWeight: 'bold',\r\n        fontSize: 25\r\n    },\r\n    question: {\r\n        color: 'blue',\r\n        top: 200\r\n    },\r\n    horizontal: {\r\n        width: '80%',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        borderWidth: '0.1px'\r\n    },\r\n    filterHeader: {\r\n        padding: 5,\r\n        fontWeight: 'bold'\r\n    }\r\n});\r\n\r\nexport default Styles;","import React, { useState } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport styles from '../Styles/Styles';\r\n\r\nconst getYearRange = startYear => {\r\n    const currentYear = new Date().getFullYear();\r\n    let years = [startYear || 2006]; // startYear must be less or equals to current year\r\n    while (!years.includes(currentYear))\r\n        years = [...years, years[years.length - 1] + 1]\r\n    return years;\r\n}\r\n\r\nconst FilterSection = props => {\r\n    const { classes, selected, setSelected } = props;\r\n    const handleSelect = (name, value) => setSelected({ ...selected, [name]: value });\r\n    const buttonStyle = (name, value) => ({ backgroundColor: selected[name] === value ? \"LimeGreen\" : 'LightGreen', padding: '1px', textTransform: \"none\" });\r\n    return (\r\n        <Paper >\r\n            <span className={classes.filterHeader}>Filters</span>\r\n            <Grid container spacing={2} justify='space-between' style={{ width: 'auto', margin: '20px' }}>\r\n                <Grid container justify='center' className={classes.filterHeader}>Launch Year <hr className={classes.horizontal} /></Grid>\r\n                {getYearRange().map(value =>\r\n                    <Grid item >\r\n                        <Button\r\n                            style={buttonStyle('launch_year', value)}\r\n                            onClick={() => handleSelect('launch_year', value)}\r\n                        >\r\n                            {value}\r\n                        </Button>\r\n                    </Grid>\r\n                )}</Grid>\r\n            <Grid container spacing={2} justify='space-between' style={{ width: 'auto', margin: '20px' }}>\r\n                <Grid container justify='center' className={classes.filterHeader}>Successful Launch <hr className={classes.horizontal} /></Grid>\r\n                {['True', 'False'].map(value =>\r\n                    <Grid item >\r\n                        <Button\r\n                            style={buttonStyle('launch_success', value)}\r\n                            onClick={() => handleSelect('launch_success', value)}\r\n                        >\r\n                            {value}\r\n                        </Button>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <Grid container spacing={2} justify='space-between' style={{ width: 'auto', margin: '20px' }}>\r\n                <Grid container justify='center' className={classes.filterHeader}>Successful Landing <hr className={classes.horizontal} /></Grid>\r\n                {['True', 'False'].map(value =>\r\n                    <Grid item >\r\n                        <Button\r\n                            style={buttonStyle('land_success', value)}\r\n                            onClick={() => handleSelect('land_success', value)}\r\n                        >\r\n                            {value}\r\n                        </Button>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <br />\r\n        </Paper >\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(FilterSection);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport logo from '../logo.svg';\r\n\r\nconst useStyles = makeStyles({\r\n  media: {\r\n    height: 200,\r\n  },\r\n  content: {\r\n    padding: 5,\r\n    height: 50\r\n  },\r\n  content: {\r\n    padding: 2\r\n  }\r\n});\r\n\r\nconst LaunchCard = props => {\r\n  const { launchDetails } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Card>\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={launchDetails.links.flickr_images[0] || logo}\r\n      />\r\n      <CardContent className={classes.content}>\r\n        <Typography variant=\"subtitle2\" noWrap={true} style={{ color: '#315584', fontWeight: 'bold' }}>\r\n          {launchDetails.mission_name} # {launchDetails.flight_number}\r\n        </Typography>\r\n        <Typography variant=\"body2\" noWrap={true} style={{ fontWeight: 'bold' }}>\r\n          Mission Ids: {launchDetails.mission_id.map(\r\n          item =>\r\n            (<ul style={{ color: '#315584', fontWeight: 'bold' }}>\r\n              <li>\r\n                {item}\r\n              </li>\r\n            </ul>)\r\n        )}\r\n        </Typography>\r\n        <Typography variant=\"body2\" noWrap={true} style={{ fontWeight: 'bold' }}>\r\n          Launch Year: {new Date(launchDetails.launch_date_local).getFullYear()}\r\n        </Typography>\r\n        <Typography variant=\"body2\" noWrap={true} style={{ fontWeight: 'bold' }}>\r\n          Successful Launch: {`${launchDetails.launch_success}`}\r\n        </Typography>\r\n        <Typography variant=\"body2\" noWrap={true} style={{ fontWeight: 'bold' }}>\r\n          Successful Landing: {launchDetails.launch_landing ? `${launchDetails.launch_landing}` : 'N/A'}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card >\r\n  );\r\n}\r\n\r\nexport default LaunchCard;\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styles from '../Styles/Styles';\r\nimport LaunchCard from './LaunchCard';\r\n\r\nconst LaunchList = props => {\r\n    const { launchList } = props;\r\n    return (\r\n        <div style={{ height: 'calc(100vh - 60px)', overflow: \"auto\" }} >\r\n            <Grid container spacing={1} style={{ width: 'auto', margin: 'auto' }}>\r\n                {launchList.map(\r\n                    (launchDetails, idx) =>\r\n                        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n                            <LaunchCard launchDetails={launchDetails} />\r\n                        </Grid>\r\n                )}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LaunchList;","import React, { useState, useEffect } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport styles from './Styles/Styles';\r\nimport { FilterSection, LaunchList } from './Components';\r\n\r\nconst Application = props => {\r\n    const { classes } = props;\r\n    const [selected, setSelected] = useState({});\r\n    const [launchList, setLaunchList] = useState([]);\r\n\r\n    const fetchData = () => {\r\n        let selectedParam = {};\r\n        for (let param in selected)\r\n            selectedParam[param] = `${selected[param]}`.toLowerCase();\r\n        fetch(`https://api.spacexdata.com/v3/launches?${new URLSearchParams({ limit: 100, ...selectedParam })}`)\r\n            .then(response => response.json())\r\n            .then(data => setLaunchList(data))\r\n            .catch(error => console.error(error));\r\n    }\r\n\r\n    useEffect(() => { fetchData() }, [selected]);\r\n\r\n    return (\r\n        <div className={classes.fullOuter}>\r\n            <span className={classes.header}>SpaceX Launch Programs</span>\r\n            <Grid container direction='row' spacing={1} justify='space-between' style={{ width: 'auto', margin: 10, marginTop: 0 }}>\r\n                <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                    <FilterSection selected={selected} setSelected={setSelected} />\r\n                </Grid>\r\n                <Grid item lg={10} md={10} sm={12} xs={12}>\r\n                    <LaunchList launchList={launchList} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(Application);\r\n","import React from 'react';\nimport Application from './Application';\n\nconst App = () => <Application />; // kept extra layer of to add generic concerns like providers\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}